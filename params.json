{"name":"DBManager-logger","tagline":"Database manager with logger for audit","body":"Database Manager\r\n================\r\n\r\n<p>This class provides a safe connection with database (yeah, it does use transaction) and log all actions performed daily into a single file/day.</p>\r\n<p>You can audit all queries was performed into database, with values, datetime and totally debugged by viewing the files created into ./log/ folder.</p>\r\n\r\n---\r\n[![Coverage Status](https://coveralls.io/repos/mend3/dbmanager-logger/badge.png)](https://coveralls.io/r/mend3/dbmanager-logger) [![Latest Stable Version](https://poser.pugx.org/connection/dbmanager/v/stable.svg)](https://packagist.org/packages/connection/dbmanager) [![Total Downloads](https://poser.pugx.org/connection/dbmanager/downloads.svg)](https://packagist.org/packages/connection/dbmanager) [![Latest Unstable Version](https://poser.pugx.org/connection/dbmanager/v/unstable.svg)](https://packagist.org/packages/connection/dbmanager) [![License](https://poser.pugx.org/connection/dbmanager/license.svg)](https://packagist.org/packages/connection/dbmanager)\r\n---\r\n## License\r\n\r\n<p>This program is free software; you can redistribute it and/or\r\nmodify it under the terms of the GNU General Public License\r\nas published by the Free Software Foundation; either version 2\r\nof the License, or (at your option) any later version.</p>\r\n\r\n<p>This program is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU General Public License for more details.</p>\r\n\r\n<p>You should have received a copy of the GNU General Public License\r\nalong with this program; if not, write to the Free Software\r\nFoundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.</p>\r\n\r\n---\r\n\r\n## Installation\r\n\r\nExecute the [sql file](src/accounts.sql \"Example test table\") located in ```./src/```\r\n\r\nInstall [apache/log4php] using [composer].  \r\n\r\nTo install, add ```apache/log4php``` to your ```composer.json``` file.\r\n\r\n```\r\n{  \r\n   \"require\" : {  \r\n    \"apache/log4php\": \"2.3.0\"  \r\n  },  \r\n}\r\n```\r\n\r\nFrom there, use the ```composer install``` or ```composer update``` commands to install.\r\n\r\n\r\n---\r\n\r\n## Basic Usage\r\n\r\n```php  \r\n<?php  \r\ndefine('DB_HOST', 'my-host'); // define the host of mysql server  \r\ndefine('DB_PORT', 3306); // define the port of mysql server  \r\ndefine('DB_USER', 'my-user'); // define the user of mysql server  \r\ndefine('DB_PASS', 'my-pass'); // define the password of mysql server  \r\ndefine('DB_NAME', 'my-db'); // define the database name  \r\ndefine('DB_ENCODING', 'utf8'); // define the encoding of statements  \r\n\r\n// Assuming you installed from Composer:  \r\nrequire \"vendor/autoload.php\";  \r\n\r\n// Get the instance of DBManager:  \r\n$pdo = DBManager::getInstance();  \r\n\r\n###### INSERT STATEMENT ######  \r\n// Array with columnKey => val (columns that will be used on INSERT clause)  \r\n$paramIns = array(  \r\n    'colName1' => 'colValue1',  \r\n    'colName2' => 'colValue2',  \r\n    'colNameN' => 'colValueN',  \r\n);  \r\n// Creates the sql  \r\n$insert = $pdo->createInsert('tableName', $paramIns);  \r\n/*Array  \r\n(  \r\n    [colName1] => colValue1  \r\n    [colName2] => colValue2  \r\n    [colNameN] => colValueN  \r\n)\r\nINSERT INTO tableName(`colName1`,`colName2`,`colNameN`) VALUES (:colName1,:colName2,:colNameN);  \r\n*/  \r\n$resultInsert = $pdo->query($insert);  \r\n  \r\n###### UPDATE STATEMENT ######  \r\n// Array with columnKey => val (columns that will be updated)  \r\n$paramUpd = array(  \r\n    'colName1' => 'colValue1',  \r\n    'colName2' => 'colValue2'  \r\n);  \r\n// Array with columnKey => val (columns that will be used on WHERE clause)  \r\n// If null or empty, the result sql will be \"UPDATE tableName SET col1 = :val1, col2 = :va2, ... colN = :valN ;\"  \r\n$paramCond = array(  \r\n\t// The first parameter of array data is the where clause (like, equal, less, etc... [see the main class constants]])  \r\n\t// The second parameter of second array is the operand type (and|or) to concat with next column. Use null if the last param  \r\n    'key1' => array(DBManager::COL_EQUAL => array('val1' => 'and')),  \r\n    'key2' => array(DBManager::COL_EQUAL => array('val2' => null))  \r\n);  \r\n// Creates the sql  \r\n$update = $pdo->createUpdate('tableName', $paramUpd, $paramCond);  \r\n/*Array  \r\n(  \r\n    [colName1] => colValue1  \r\n    [colName2] => colValue2  \r\n    [key1] => val1  \r\n    [key2] => val2  \r\n)  \r\nUPDATE tableName SET `colName1` = :colName1,  `colName2` = :colName2 WHERE `key1` =  :key1 and `key2` =  :key2 ;  \r\n*/  \r\n$resultUpdate = $pdo->query($update);  \r\n  \r\n###### DELETE STATEMENT ######  \r\n// Array with columnKey => value to where clause to delete  \r\n// If null or empty, the result sql will be \"DELETE FROM tableName;\"  \r\n$paramDel = array(  \r\n\t// The first parameter of array data is the where clause (like, equal, less, etc... [see the main class constants]])  \r\n\t// The second parameter of second array is the operand type (and|or) to concat with next column. Use null if the last param  \r\n\t'colKey1' => array(DBManager::COL_EQUAL => array('colVal1' => null))  \r\n);  \r\n$delete = $pdo->createDelete('tableName', $paramDel);  \r\n/*Array  \r\n(  \r\n    [colKey1] => colVal1  \r\n)  \r\nDELETE FROM table WHERE  `key1` =  :key1;  \r\n*/  \r\n$resultDelete = $pdo->query($delete);  \r\n  \r\n###### SELECT STATEMENT ######  \r\n// Array with columns to retrieve  \r\n$paramSelect = array('colName1', 'colName2', 'colNameN');  \r\n// Array with columnKey => value to where clause to select  \r\n// If null or empty, the result sql will be \"SELECT col1, col2,... colN FROM tableName ORDER BY col1,col2,...colN;\"  \r\n$paramWhere = array(  \r\n\t// The first parameter of array data is the where clause (like, equal, less, etc... [see the main class constants]])  \r\n\t// The second parameter of second array is the operand type (and|or) to concat with next column. Use null if the last param  \r\n    'colName1' => array(DBManager::COL_LIKE => array('colValue1' => 'and')),  \r\n    'colName2' => array(DBManager::COL_LIKE => array('colValue2' => null))  \r\n);  \r\n// Array with columnKey -> value to order clause to select  \r\n// If null or empty, the result sql will be \"SELECT col1, col2,... colN FROM tableName;\"  \r\n$paramOrder = array(  \r\n\t// Fields used in order  \r\n    'fields' => array('colName1', 'colName2'),  \r\n\t// Order type (asc|desc)  \r\n    'order' => 'ASC'  \r\n);  \r\n// Creates the sql  \r\n$select = $pdo->createSelect('tableName', $paramSelect, $paramWhere, $paramOrder);  \r\n/*Array  \r\n(  \r\n    [colName1] => %colValue1%  \r\n    [colName2] => %colValue2%  \r\n)  \r\nSELECT `colName1`, `colName2`, `colNameN` FROM table  WHERE  `colName1` LIKE :colName1 and `colName2` LIKE :colName2 ORDER BY colName1,colName2 ASC;  \r\n*/  \r\n$resultSelect = $pdo->select($select);  \r\n  \r\nunset($pdo);  \r\n?>  \r\n```  \r\n\r\n## Screenshots  \r\n\r\n![Logger HTML view](https://github.com/mend3/dbmanager-logger/raw/master/views/screenshot.png \"The script result on the web\")  \r\n![Logger FILE view](https://github.com/mend3/dbmanager-logger/raw/master/views/screenshot2.png \"The script result on the file\")\r\n\r\n[apache/log4php]:http://logging.apache.org/log4php/download.html\r\n[composer]:http://getcomposer.org/","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}